{
  "version": 3,
  "sources": ["../../clsx/dist/clsx.m.js", "../../react-toastify/src/utils/propValidator.ts", "../../react-toastify/src/utils/constant.ts", "../../react-toastify/src/utils/collapseToast.ts", "../../react-toastify/src/utils/cssTransition.tsx", "../../react-toastify/src/utils/mapper.ts", "../../react-toastify/src/core/eventManager.ts", "../../react-toastify/src/components/Icons.tsx", "../../react-toastify/src/hooks/useToastContainer.ts", "../../react-toastify/src/hooks/useToast.ts", "../../react-toastify/src/components/CloseButton.tsx", "../../react-toastify/src/components/ProgressBar.tsx", "../../react-toastify/src/components/Toast.tsx", "../../react-toastify/src/components/Transitions.tsx", "../../react-toastify/src/components/ToastContainer.tsx", "../../react-toastify/src/core/toast.ts"],
  "sourcesContent": ["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "import { isValidElement } from 'react';\n\nimport { Id } from '../types';\n\nexport function isNum(v: any): v is Number {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nexport function isBool(v: any): v is Boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function parseClassName(v: any) {\n  return isStr(v) || isFn(v) ? v : null;\n}\n\nexport function isToastIdValid(toastId?: Id) {\n  return toastId != null;\n}\n\nexport function getAutoCloseDelay(\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) {\n  return toastAutoClose === false ||\n    (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n}\n\nexport function canBeRendered<T>(content: T): boolean {\n  return (\n    isValidElement(content) || isStr(content) || isFn(content) || isNum(content)\n  );\n}\n", "import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT';\n\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n\nexport const enum Default {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify',\n  DRAGGABLE_PERCENT = 80\n}\n\nexport const enum Direction {\n  X = 'x',\n  Y = 'y'\n}\n\nexport const enum SyntheticEvent {\n  ENTRANCE_ANIMATION_END = 'd'\n}\n", "import { Default } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = Default.COLLAPSE_DURATION\n) {\n  const { scrollHeight, style } = node;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration as number);\n    });\n  });\n}\n", "import React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport { collapseToast } from './collapseToast';\nimport { Default, SyntheticEvent } from './constant';\n\nimport { ToastTransitionProps } from '../types';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Append current toast position to the classname.\n   * If multiple classes are provided, only the last one will get the position\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when exit animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nconst enum AnimationStep {\n  Enter,\n  Exit\n}\n\n/**\n * Css animation that just work.\n * You could use animate.css for instance\n *\n *\n * ```\n * cssTransition({\n *   enter: \"animate__animated animate__bounceIn\",\n *   exit: \"animate__animated animate__bounceOut\"\n * })\n * ```\n *\n */\nexport function cssTransition({\n  enter,\n  exit,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = Default.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    nodeRef,\n    isIn\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n    const animationStep = useRef(AnimationStep.Enter);\n\n    useLayoutEffect(() => {\n      const node = nodeRef.current!;\n      const classToToken = enterClassName.split(' ');\n\n      const onEntered = (e: AnimationEvent) => {\n        if (e.target !== nodeRef.current) return;\n\n        node.dispatchEvent(new Event(SyntheticEvent.ENTRANCE_ANIMATION_END));\n        node.removeEventListener('animationend', onEntered);\n        node.removeEventListener('animationcancel', onEntered);\n        if (\n          animationStep.current === AnimationStep.Enter &&\n          e.type !== 'animationcancel'\n        ) {\n          node.classList.remove(...classToToken);\n        }\n      };\n\n      const onEnter = () => {\n        node.classList.add(...classToToken);\n        node.addEventListener('animationend', onEntered);\n        node.addEventListener('animationcancel', onEntered);\n      };\n\n      onEnter();\n    }, []);\n\n    useEffect(() => {\n      const node = nodeRef.current!;\n\n      const onExited = () => {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      };\n\n      const onExit = () => {\n        animationStep.current = AnimationStep.Exit;\n        node.className += ` ${exitClassName}`;\n        node.addEventListener('animationend', onExited);\n      };\n\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n\n    return <>{children}</>;\n  };\n}\n", "import { Toast, ToastItem, ToastItemStatus } from '../types';\n\nexport function toToastItem(toast: Toast, status: ToastItemStatus): ToastItem {\n  return {\n    content: toast.content,\n    containerId: toast.props.containerId,\n    id: toast.props.toastId,\n    theme: toast.props.theme,\n    type: toast.props.type,\n    data: toast.props.data || {},\n    isLoading: toast.props.isLoading,\n    icon: toast.props.icon,\n    status\n  };\n}\n", "import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastItem\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\n\nexport type OnChangeCallback = (toast: ToastItem) => void;\n\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit(\n    event: Event.Show,\n    content: React.ReactNode,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, data: ToastItem): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer: TimeoutId = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n", "import React, { cloneElement, isValidElement } from 'react';\n\nimport { Theme, ToastProps, TypeOptions } from '../types';\nimport { Default, isFn, isNum, isStr } from '../utils';\n\n/**\n * Used when providing custom icon\n */\nexport interface IconProps {\n  theme: Theme;\n  type: TypeOptions;\n}\n\nexport type BuiltInIconProps = React.SVGProps<SVGSVGElement> & IconProps;\n\nconst Svg: React.FC<BuiltInIconProps> = ({ theme, type, ...rest }) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    width=\"100%\"\n    height=\"100%\"\n    fill={\n      theme === 'colored'\n        ? 'currentColor'\n        : `var(--toastify-icon-color-${type})`\n    }\n    {...rest}\n  />\n);\n\nfunction Warning(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\" />\n    </Svg>\n  );\n}\n\nfunction Info(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\" />\n    </Svg>\n  );\n}\n\nfunction Success(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\" />\n    </Svg>\n  );\n}\n\nfunction Error(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\" />\n    </Svg>\n  );\n}\n\nfunction Spinner() {\n  return <div className={`${Default.CSS_NAMESPACE}__spinner`} />;\n}\n\nexport const Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\n\nconst maybeIcon = (type: string): type is keyof typeof Icons => type in Icons;\n\nexport function getIcon({ theme, type, isLoading, icon }: ToastProps) {\n  let Icon: React.ReactNode = null;\n  const iconProps = { theme, type };\n\n  if (icon === false) {\n    // hide\n  } else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (isValidElement(icon)) {\n    Icon = cloneElement(icon, iconProps);\n  } else if (isStr(icon) || isNum(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  } else if (maybeIcon(type)) {\n    Icon = Icons[type](iconProps);\n  }\n\n  return Icon;\n}\n", "import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement,\n  useState\n} from 'react';\nimport {\n  parseClassName,\n  canBeRendered,\n  isBool,\n  isFn,\n  isNum,\n  isStr,\n  isToastIdValid,\n  getAutoCloseDelay,\n  toToastItem\n} from '../utils';\nimport { eventManager, Event } from '../core/eventManager';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastTransition\n} from '../types';\n\nimport { getIcon } from '../components/Icons';\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null | undefined;\n  queue: QueuedToast[];\n  count: number;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toastIds, setToastIds] = useState<Id[]>([]);\n  const containerRef = useRef(null);\n  const toastToRender = useRef(new Map<Id, Toast>()).current;\n  const isToastActive = (id: Id) => toastIds.indexOf(id) !== -1;\n  const instance = useRef<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props,\n    containerId: null,\n    isToastActive,\n    getToast: id => toastToRender.get(id)\n  }).current;\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n      return () => {\n        toastToRender.clear();\n        eventManager.emit(Event.WillUnmount, instance);\n      };\n  }, []);\n\n  useEffect(() => {\n    instance.props = props;\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n  });\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit } = instance.props;\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    setToastIds(state =>\n      isToastIdValid(toastId) ? state.filter(id => id !== toastId) : []\n    );\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } =\n      instance.queue.shift() as QueuedToast;\n    appendToast(toastContent, toastProps, staleId);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid(options: NotValidatedToastProps) {\n    return (\n      !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        options.containerId !== instance.props.containerId) ||\n      (toastToRender.has(options.toastId) && options.updateId == null)\n    );\n  }\n\n  // this function and all the function called inside needs to rely on refs\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId, data } = options;\n    const { props } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = updateId == null;\n\n    if (isNotAnUpdate) instance.count++;\n\n    const toastProps: ToastProps = {\n      toastId,\n      updateId,\n      data,\n      containerId: options.containerId,\n      isLoading: options.isLoading,\n      theme: options.theme || props.theme!,\n      icon: options.icon != null ? options.icon : props.icon,\n      isIn: false,\n      key: options.key || instance.toastKey++,\n      type: options.type!,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || (props.position as ToastPosition),\n      transition: options.transition || (props.transition as ToastTransition),\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover)\n        ? options.pauseOnHover\n        : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss)\n        ? options.pauseOnFocusLoss\n        : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable)\n        ? options.draggable\n        : props.draggable,\n      draggablePercent:\n        options.draggablePercent || (props.draggablePercent as number),\n      draggableDirection:\n        options.draggableDirection || props.draggableDirection,\n      closeOnClick: isBool(options.closeOnClick)\n        ? options.closeOnClick\n        : props.closeOnClick,\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: options.isLoading\n        ? false\n        : getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar)\n        ? options.hideProgressBar\n        : props.hideProgressBar,\n      progress: options.progress,\n      role: options.role || props.role,\n      deleteToast() {\n        const removed = toToastItem(toastToRender.get(toastId)!, 'removed');\n        toastToRender.delete(toastId);\n\n        eventManager.emit(Event.Change, removed);\n\n        const queueLen = instance.queue.length;\n        instance.count = isToastIdValid(toastId)\n          ? instance.count - 1\n          : instance.count - instance.displayedToast;\n\n        if (instance.count < 0) instance.count = 0;\n\n        if (queueLen > 0) {\n          const freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit!;\n\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n\n            for (let i = 0; i < toDequeue; i++) dequeueToast();\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n    };\n\n    toastProps.iconOut = getIcon(toastProps);\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    toastProps.closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton)\n        ? props.closeButton\n        : true;\n    }\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast,\n        toastProps,\n        data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast, toastProps, data });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      instance.count > props.limit &&\n      isNotAnUpdate\n    ) {\n      instance.queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay)) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    if (staleId) toastToRender.delete(staleId);\n\n    const toast = {\n      content,\n      props: toastProps\n    };\n    toastToRender.set(toastId, toast);\n\n    setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n    eventManager.emit(\n      Event.Change,\n      toToastItem(toast, toast.props.updateId == null ? 'added' : 'updated')\n    );\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toRender = new Map<ToastPosition, Toast[]>();\n    const collection = Array.from(toastToRender.values());\n\n    if (props.newestOnTop) collection.reverse();\n\n    collection.forEach(toast => {\n      const { position } = toast.props;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position)!.push(toast);\n    });\n\n    return Array.from(toRender, p => cb(p[0], p[1]));\n  }\n\n  return {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  };\n}\n", "import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn, Default, Direction, SyntheticEvent } from '../utils';\nimport { ToastProps } from '../types';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  delta: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n  didMove: boolean;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useRef<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  const syncProps = useRef(props);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    syncProps.current = props;\n  });\n\n  useEffect(() => {\n    if (toastRef.current)\n      toastRef.current.addEventListener(\n        SyntheticEvent.ENTRANCE_ANIMATION_END,\n        playToast,\n        { once: true }\n      );\n\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      const props = syncProps.current;\n      if (isFn(props.onClose))\n        props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (props.draggable) {\n      bindDragEvents();\n      const toast = toastRef.current!;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent as DragEvent);\n      drag.y = getY(e.nativeEvent as DragEvent);\n\n      if (props.draggableDirection === Direction.X) {\n        drag.start = drag.x;\n        drag.removalDistance =\n          toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance =\n          toast.offsetHeight *\n          (props.draggablePercent === Default.DRAGGABLE_PERCENT\n            ? props.draggablePercent * 1.5\n            : props.draggablePercent / 100);\n      }\n    }\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e as DragEvent);\n      drag.y = getY(e as DragEvent);\n      if (props.draggableDirection === Direction.X) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      }\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = `translate${props.draggableDirection}(${drag.delta}px)`;\n      toast.style.opacity = `${\n        1 - Math.abs(drag.delta / drag.removalDistance)\n      }`;\n    }\n  }\n\n  function onDragEnd() {\n    unbindDragEvents();\n    const toast = toastRef.current!;\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = `translate${props.draggableDirection}(0)`;\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n", "import React from 'react';\nimport { Default } from '../utils';\nimport { Theme, TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n  theme: Theme;\n}\n\nexport function CloseButton({\n  closeToast,\n  theme,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${Default.CSS_NAMESPACE}__close-button ${Default.CSS_NAMESPACE}__close-button--${theme}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n", "import React from 'react';\nimport cx from 'clsx';\n\nimport { TYPE, Default, isFn } from './../utils';\nimport { TypeOptions, ToastClassName, Theme } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * The theme that is currently used\n   */\n  theme: Theme;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: ToastClassName;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn,\n  theme\n}: ProgressBarProps) {\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${Default.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${Default.CSS_NAMESPACE}__progress-bar--animated`,\n    `${Default.CSS_NAMESPACE}__progress-bar-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    }\n  );\n  const classNames = isFn(className)\n    ? className({\n        rtl,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n\n  // \uD83E\uDDD0 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-hidden={hide ? 'true' : 'false'}\n      aria-label=\"notification timer\"\n      className={classNames}\n      style={style}\n      {...animationEvent}\n    />\n  );\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n", "import React from 'react';\nimport cx from 'clsx';\n\nimport { ProgressBar } from './ProgressBar';\nimport { CloseButton } from './CloseButton';\nimport { ToastProps } from '../types';\nimport { Default, isFn } from '../utils';\nimport { useToast } from '../hooks/useToast';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const { isRunning, preventExitTransition, toastRef, eventHandlers } =\n    useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast,\n    isIn,\n    isLoading,\n    iconOut,\n    theme\n  } = props;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__toast`,\n    `${Default.CSS_NAMESPACE}__toast-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__toast--rtl`]: rtl\n    }\n  );\n  const cssClasses = isFn(className)\n    ? className({\n        rtl,\n        position,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n  const isProgressControlled = !!progress;\n\n  const closeButtonProps = { closeToast, type, theme };\n  let Close: React.ReactNode = null;\n\n  if (closeButton === false) {\n    // hide\n  } else if (isFn(closeButton)) {\n    Close = closeButton(closeButtonProps);\n  } else if (React.isValidElement(closeButton)) {\n    Close = React.cloneElement(closeButton, closeButtonProps);\n  } else {\n    Close = CloseButton(closeButtonProps);\n  }\n\n  return (\n    <Transition\n      isIn={isIn}\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(isIn && { role: role })}\n          className={\n            isFn(bodyClassName)\n              ? bodyClassName({ type })\n              : cx(`${Default.CSS_NAMESPACE}__toast-body`, bodyClassName)\n          }\n          style={bodyStyle}\n        >\n          {iconOut != null && (\n            <div\n              className={cx(`${Default.CSS_NAMESPACE}__toast-icon`, {\n                [`${Default.CSS_NAMESPACE}--animate-icon ${Default.CSS_NAMESPACE}__zoom-enter`]:\n                  !isLoading\n              })}\n            >\n              {iconOut}\n            </div>\n          )}\n          <div>{children}</div>\n        </div>\n        {Close}\n        {(autoClose || isProgressControlled) && (\n          <ProgressBar\n            {...(updateId && !isProgressControlled\n              ? { key: `pb-${updateId}` }\n              : {})}\n            rtl={rtl}\n            theme={theme}\n            delay={autoClose as number}\n            isRunning={isRunning}\n            isIn={isIn}\n            closeToast={closeToast}\n            hide={hideProgressBar}\n            type={type}\n            style={progressStyle}\n            className={progressClassName}\n            controlledProgress={isProgressControlled}\n            progress={progress}\n          />\n        )}\n      </div>\n    </Transition>\n  );\n};\n", "import { Default, cssTransition } from '../utils';\n\nconst Bounce = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-exit`,\n  appendPosition: true\n});\n\nconst Slide = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-exit`,\n  appendPosition: true\n});\n\nconst Zoom = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-exit`\n});\n\nconst Flip = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-exit`\n});\n\nexport { Bounce, Slide, Zoom, Flip };\n", "// https://github.com/yannickcr/eslint-plugin-react/issues/3140\n/* eslint react/prop-types: \"off\" */\nimport React, { forwardRef, StyleHTMLAttributes, useEffect } from 'react';\nimport cx from 'clsx';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { POSITION, Direction, Default, parseClassName, isFn } from '../utils';\nimport { useToastContainer } from '../hooks/useToastContainer';\nimport { ToastContainerProps, ToastPosition } from '../types';\n\nexport const ToastContainer = forwardRef<HTMLDivElement, ToastContainerProps>(\n  (props, ref) => {\n    const { getToastToRender, containerRef, isToastActive } =\n      useToastContainer(props);\n    const { className, style, rtl, containerId } = props;\n\n    function getClassName(position: ToastPosition) {\n      const defaultClassName = cx(\n        `${Default.CSS_NAMESPACE}__toast-container`,\n        `${Default.CSS_NAMESPACE}__toast-container--${position}`,\n        { [`${Default.CSS_NAMESPACE}__toast-container--rtl`]: rtl }\n      );\n      return isFn(className)\n        ? className({\n            position,\n            rtl,\n            defaultClassName\n          })\n        : cx(defaultClassName, parseClassName(className));\n    }\n\n    useEffect(() => {\n      if (ref) {\n        (ref as React.MutableRefObject<HTMLDivElement>).current =\n          containerRef.current!;\n      }\n    }, []);\n\n    return (\n      <div\n        ref={containerRef}\n        className={Default.CSS_NAMESPACE as string}\n        id={containerId as string}\n      >\n        {getToastToRender((position, toastList) => {\n          const containerStyle: React.CSSProperties = !toastList.length\n            ? { ...style, pointerEvents: 'none' }\n            : { ...style };\n\n          return (\n            <div\n              className={getClassName(position)}\n              style={containerStyle}\n              key={`container-${position}`}\n            >\n              {toastList.map(({ content, props: toastProps }, i) => {\n                return (\n                  <Toast\n                    {...toastProps}\n                    isIn={isToastActive(toastProps.toastId)}\n                    style={\n                      {\n                        ...toastProps.style,\n                        '--nth': i + 1,\n                        '--len': toastList.length\n                      } as StyleHTMLAttributes<HTMLDivElement>\n                    }\n                    key={`toast-${toastProps.key}`}\n                  >\n                    {content}\n                  </Toast>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\n\nToastContainer.displayName = 'ToastContainer';\n\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT as ToastPosition,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: Default.DRAGGABLE_PERCENT as number,\n  draggableDirection: Direction.X,\n  role: 'alert',\n  theme: 'light'\n};\n", "import { POSITION, TYPE, isStr, isNum, isFn, isToastIdValid } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  TypeOptions\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\ninterface EnqueuedToast {\n  content: ToastContent;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet queue: EnqueuedToast[] = [];\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = containers.get(containerId || latestInstance);\n  if (!container) return null;\n\n  return container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast(\n  content: ToastContent,\n  options: NotValidatedToastProps\n): Id {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nfunction createToastByType(type: string) {\n  return (content: ToastContent, options?: ToastOptions) =>\n    dispatchToast(content, mergeOptions(type, options));\n}\n\nfunction toast(content: ToastContent, options?: ToastOptions) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n}\n\ntoast.loading = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      isLoading: true,\n      autoClose: false,\n      closeOnClick: false,\n      closeButton: false,\n      draggable: false,\n      ...options\n    })\n  );\n\nexport interface ToastPromiseParams<T = unknown> {\n  pending?: string | UpdateOptions<void>;\n  success?: string | UpdateOptions<T>;\n  error?: string | UpdateOptions<any>;\n}\n\nfunction handlePromise<T = unknown>(\n  promise: Promise<T> | (() => Promise<T>),\n  { pending, error, success }: ToastPromiseParams<T>,\n  options?: ToastOptions\n) {\n  let id: Id;\n\n  if (pending) {\n    id = isStr(pending)\n      ? toast.loading(pending, options)\n      : toast.loading(pending.render, {\n          ...options,\n          ...(pending as ToastOptions)\n        });\n  }\n\n  const resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null,\n    delay: 100\n  };\n\n  const resolver = (\n    type: TypeOptions,\n    input: string | UpdateOptions<T> | undefined,\n    result: T\n  ) => {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n\n    const baseParams = {\n      type,\n      ...resetParams,\n      ...options,\n      data: result\n    };\n    const params = isStr(input) ? { render: input } : input;\n\n    // if the id is set we know that it's an update\n    if (id) {\n      toast.update(id, {\n        ...baseParams,\n        ...params\n      });\n    } else {\n      // using toast.promise without loading\n      toast(params.render, {\n        ...baseParams,\n        ...params\n      } as ToastOptions);\n    }\n\n    return result;\n  };\n\n  const p = isFn(promise) ? promise() : promise;\n\n  //call the resolvers only when needed\n  p.then(result => resolver('success', success, result)).catch(err =>\n    resolver('error', error, err)\n  );\n\n  return p;\n}\n\ntoast.promise = handlePromise;\ntoast.success = createToastByType(TYPE.SUCCESS);\ntoast.info = createToastByType(TYPE.INFO);\ntoast.error = createToastByType(TYPE.ERROR);\ntoast.warning = createToastByType(TYPE.WARNING);\ntoast.warn = toast.warning;\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      theme: 'dark',\n      ...options\n    })\n  );\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) => {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Clear, id);\n  } else {\n    queue = queue.filter(t => isToastIdValid(id) && t.options.toastId !== id);\n  }\n};\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = (toastId: Id, options: UpdateOptions = {}) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Subscribe to change when a toast is added, removed and updated\n *\n * Usage:\n * ```\n * const unsubscribe = toast.onChange((payload) => {\n *   switch (payload.status) {\n *   case \"added\":\n *     // new toast added\n *     break;\n *   case \"updated\":\n *     // toast updated\n *     break;\n *   case \"removed\":\n *     // toast has been removed\n *     break;\n *   }\n * })\n * ```\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  eventManager.on(Event.Change, callback);\n  return () => {\n    eventManager.off(Event.Change, callback);\n  };\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n  });\n\nexport { toast };\n"],
  "mappings": ";;;;;;;;;AAAA,SAAS,EAAE,GAAE;AAAC,MAAI,GAAE,GAAE,IAAE;AAAG,MAAG,YAAU,OAAO,KAAG,YAAU,OAAO;AAAE,SAAG;AAAA,WAAU,YAAU,OAAO;AAAE,QAAG,MAAM,QAAQ,CAAC;AAAE,WAAI,IAAE,GAAE,IAAE,EAAE,QAAO;AAAI,UAAE,OAAK,IAAE,EAAE,EAAE,EAAE,OAAK,MAAI,KAAG,MAAK,KAAG;AAAA;AAAQ,WAAI,KAAK;AAAE,UAAE,OAAK,MAAI,KAAG,MAAK,KAAG;AAAG,SAAO;AAAC;AAAQ,SAAS,OAAM;AAAC,WAAQ,GAAE,GAAE,IAAE,GAAE,IAAE,IAAG,IAAE,UAAU;AAAQ,KAAC,IAAE,UAAU,UAAQ,IAAE,EAAE,CAAC,OAAK,MAAI,KAAG,MAAK,KAAG;AAAG,SAAO;AAAC;AAAC,IAAO,iBAAQ;;;SCIjWA,MAAMC,GAAAA;AACpB,SAAO,OAAOA,MAAM,YAAY,CAACC,MAAMD,CAAD;AACvC;SAEeE,OAAOF,GAAAA;AACrB,SAAO,OAAOA,MAAM;AACrB;SAEeG,MAAMH,GAAAA;AACpB,SAAO,OAAOA,MAAM;AACrB;SAEeI,KAAKJ,GAAAA;AACnB,SAAO,OAAOA,MAAM;AACrB;SAEeK,eAAeL,GAAAA;AAC7B,SAAOG,MAAMH,CAAD,KAAOI,KAAKJ,CAAD,IAAMA,IAAI;AAClC;SAEeM,eAAeC,SAAAA;AAC7B,SAAOA,WAAW;AACnB;SAEeC,kBACdC,gBACAC,oBAAAA;AAEA,SAAOD,mBAAmB,SACvBV,MAAMU,cAAD,KAAoBA,iBAAiB,IACzCA,iBACAC;AACL;SAEeC,cAAiBC,SAAAA;AAC/B,aACEC,6BAAeD,OAAD,KAAaT,MAAMS,OAAD,KAAaR,KAAKQ,OAAD,KAAab,MAAMa,OAAD;AAEtE;AC9BM,IAAME,WAAsD;EACjEC,UAAU;EACVC,WAAW;EACXC,YAAY;EACZC,aAAa;EACbC,cAAc;EACdC,eAAe;AANkD;AAS5D,IAAMC,OAA4C;EACvDC,MAAM;EACNC,SAAS;EACTC,SAAS;EACTC,OAAO;EACPC,SAAS;AAL8C;SChBzCC,cACdC,MACAC,MACAC;MAAAA,aAAAA,QAAAA;AAAAA,eAAAA;;AAEA,QAAM;IAAEC;IAAcC;EAAhB,IAA0BJ;AAEhCK,wBAAsB,MAAA;AACpBD,UAAME,YAAY;AAClBF,UAAMG,SAASJ,eAAe;AAC9BC,UAAMI,aAAN,SAA0BN,WAA1B;AAEAG,0BAAsB,MAAA;AACpBD,YAAMG,SAAS;AACfH,YAAMK,UAAU;AAChBL,YAAMM,SAAS;AACfC,iBAAWV,MAAMC,QAAP;IACX,CALoB;EAMtB,CAXoB;AAYtB;SCgCeU,cAAAA,MAAAA;MAAc;IAC5BC;IACAC;IACAC,iBAAiB;IACjBC,WAAW;IACXC,mBAAgB;EALY,IAAA;AAO5B,SAAO,SAASC,gBAAT,OAAA;QAAyB;MAC9BC;MACAC;MACAC;MACApB;MACAqB;MACAC;IAN8B,IAAA;AAQ9B,UAAMC,iBAAiBT,iBAAoBF,QAAN,OAAgBO,WAAaP;AAClE,UAAMY,gBAAgBV,iBAAoBD,OAAN,OAAeM,WAAaN;AAChE,UAAMY,oBAAgBC;MAAM;IAAA;AAE5BC,sCAAgB,MAAA;AACd,YAAM5B,OAAOsB,QAAQO;AACrB,YAAMC,eAAeN,eAAeO,MAAM,GAArB;AAErB,YAAMC,YAAaC,OAAD;AAChB,YAAIA,EAAEC,WAAWZ,QAAQO;AAAS;AAElC7B,aAAKmC,cAAc,IAAIC;UAAJ;QAAA,CAAnB;AACApC,aAAKqC,oBAAoB,gBAAgBL,SAAzC;AACAhC,aAAKqC,oBAAoB,mBAAmBL,SAA5C;AACA,YACEN,cAAcG,YAAd,KACAI,EAAEK,SAAS,mBACX;AACAtC,eAAKuC,UAAUC,OAAO,GAAGV,YAAzB;QACD;MACF;AAED,YAAMW,UAAU,MAAA;AACdzC,aAAKuC,UAAUG,IAAI,GAAGZ,YAAtB;AACA9B,aAAK2C,iBAAiB,gBAAgBX,SAAtC;AACAhC,aAAK2C,iBAAiB,mBAAmBX,SAAzC;MACD;AAEDS,cAAO;IACR,GAAE,CAAA,CAzBY;AA2BfG,gCAAU,MAAA;AACR,YAAM5C,OAAOsB,QAAQO;AAErB,YAAMgB,WAAW,MAAA;AACf7C,aAAKqC,oBAAoB,gBAAgBQ,QAAzC;AACA7B,mBAAWjB,cAAcC,MAAMC,MAAMgB,gBAAb,IAAiChB,KAAI;MAC9D;AAED,YAAM6C,SAAS,MAAA;AACbpB,sBAAcG,UAAd;AACA7B,aAAK+C,aAAL,MAAsBtB;AACtBzB,aAAK2C,iBAAiB,gBAAgBE,QAAtC;MACD;AAED,UAAI,CAACtB;AAAMF,gCAAwBwB,SAAQ,IAAKC,OAAM;IACvD,GAAE,CAACvB,IAAD,CAfM;AAiBT,WAAOyB,aAAAA,QAAAA,cAAA,aAAAA,QAAA,UAAA,MAAG7B,QAAH;EACR;AACF;SCvHe8B,YAAYC,QAAcC,QAAAA;AACxC,SAAO;IACLnE,SAASkE,OAAMlE;IACfoE,aAAaF,OAAMG,MAAMD;IACzBE,IAAIJ,OAAMG,MAAM1E;IAChB4E,OAAOL,OAAMG,MAAME;IACnBjB,MAAMY,OAAMG,MAAMf;IAClBkB,MAAMN,OAAMG,MAAMG,QAAQ,CAAA;IAC1BC,WAAWP,OAAMG,MAAMI;IACvBC,MAAMR,OAAMG,MAAMK;IAClBP;EATK;AAWR;ACkDM,IAAMQ,eAA6B;EACxCC,MAAM,oBAAIC,IAAJ;EACNC,WAAW,oBAAID,IAAJ;EAEXE,GAAGC,OAAcC,UAAf;AACA,SAAKL,KAAKM,IAAIF,KAAd,KAAwB,KAAKJ,KAAKO,IAAIH,OAAO,CAAA,CAArB;AACxB,SAAKJ,KAAKQ,IAAIJ,KAAd,EAAsBK,KAAKJ,QAA3B;AACA,WAAO;EACR;EAEDK,IAAIN,OAAOC,UAAR;AACD,QAAIA,UAAU;AACZ,YAAMM,KAAK,KAAKX,KAAKQ,IAAIJ,KAAd,EAAsBQ,OAAOD,CAAAA,QAAMA,QAAON,QAA1C;AACX,WAAKL,KAAKO,IAAIH,OAAOO,EAArB;AACA,aAAO;IACR;AACD,SAAKX,KAAKa,OAAOT,KAAjB;AACA,WAAO;EACR;EAEDU,WAAWV,OAAD;AACR,UAAMW,SAAS,KAAKb,UAAUM,IAAIJ,KAAnB;AACf,QAAIW,QAAQ;AACVA,aAAOC,QAAQC,YAAf;AACA,WAAKf,UAAUW,OAAOT,KAAtB;IACD;AAED,WAAO;EACR;EAUDc,KAAKd,OAAD;AACF,SAAKJ,KAAKM,IAAIF,KAAd,KACE,KAAKJ,KAAKQ,IAAIJ,KAAd,EAAsBY,QAASX,cAAD;AAC5B,YAAMc,QAAmBpE,WAAW,MAAA;AAElCsD,iBAAS,GAAA,CAAA,EAAA,MAAA,KAAA,WAAA,CAAA,CAAD;MACT,GAAE,CAHgC;AAKnC,WAAKH,UAAUI,IAAIF,KAAnB,KAA6B,KAAKF,UAAUK,IAAIH,OAAO,CAAA,CAA1B;AAC7B,WAAKF,UAAUM,IAAIJ,KAAnB,EAA2BK,KAAKU,KAAhC;IACD,CARD;EASH;AAjDuC;ACjD1C,IAAMC,MAAkC,UAAA;AAAA,MAAC;IAAEzB;IAAOjB;OAAS2C;EAAlB,IAAD;AAAA,SACtCjC,aAAAA,QAAAA,cAAA,OAAA;IACEkC,SAAQ;IACRC,OAAM;IACN5E,QAAO;IACP6E,MACE7B,UAAU,YACN,iBADJ,+BAEiCjB,OAFjC;OAIE2C;GATN;AADsC;AAcxC,SAASI,QAAQhC,OAAjB;AACE,SACEL,aAAAA,QAAAA,cAACgC,KAAD;IAAA,GAAS3B;KACPL,aAAAA,QAAAA,cAAA,QAAA;IAAMsC,GAAE;GAAR,CADF;AAIH;AAED,SAASC,KAAKlC,OAAd;AACE,SACEL,aAAAA,QAAAA,cAACgC,KAAD;IAAA,GAAS3B;KACPL,aAAAA,QAAAA,cAAA,QAAA;IAAMsC,GAAE;GAAR,CADF;AAIH;AAED,SAASE,QAAQnC,OAAjB;AACE,SACEL,aAAAA,QAAAA,cAACgC,KAAD;IAAA,GAAS3B;KACPL,aAAAA,QAAAA,cAAA,QAAA;IAAMsC,GAAE;GAAR,CADF;AAIH;AAED,SAASG,MAAMpC,OAAf;AACE,SACEL,aAAAA,QAAAA,cAACgC,KAAD;IAAA,GAAS3B;KACPL,aAAAA,QAAAA,cAAA,QAAA;IAAMsC,GAAE;GAAR,CADF;AAIH;AAED,SAASI,UAAT;AACE,SAAO1C,aAAAA,QAAAA,cAAA,OAAA;IAAKD,WAAc;GAAnB;AACR;IAEY4C,QAAQ;EACnBC,MAAML;EACNM,SAASR;EACTS,SAASN;EACTO,OAAON;EACPO,SAASN;AALU;AAQrB,IAAMO,YAAa3D,UAA6CA,QAAQqD;SAExDO,QAAAA,OAAAA;MAAQ;IAAE3C;IAAOjB;IAAMmB;IAAWC;EAA1B,IAAA;AACtB,MAAIyC,OAAwB;AAC5B,QAAMC,YAAY;IAAE7C;IAAOjB;EAAT;AAElB,MAAIoB,SAAS;AAAO;WAETlF,KAAKkF,IAAD,GAAQ;AACrByC,WAAOzC,KAAK0C,SAAD;EACZ,eAAUnH,6BAAeyE,IAAD,GAAQ;AAC/ByC,eAAOE,2BAAa3C,MAAM0C,SAAP;EACpB,WAAU7H,MAAMmF,IAAD,KAAUvF,MAAMuF,IAAD,GAAQ;AACrCyC,WAAOzC;EACR,WAAUD,WAAW;AACpB0C,WAAOR,MAAMK,QAAN;EACR,WAAUC,UAAU3D,IAAD,GAAQ;AAC1B6D,WAAOR,MAAMrD,MAAM8D,SAAZ;EACR;AAED,SAAOD;AACR;SC1CeG,kBAAkBjD,OAAAA;AAChC,QAAM,CAAA,EAAGkD,WAAH,QAAkBC,yBAAWC,OAAKA,IAAI,GAAG,CAAb;AAClC,QAAM,CAACC,UAAUC,WAAX,QAA0BC,uBAAe,CAAA,CAAP;AACxC,QAAMC,mBAAelF,qBAAO,IAAD;AAC3B,QAAMmF,oBAAgBnF,qBAAO,oBAAIkC,IAAJ,CAAD,EAAuBhC;AACnD,QAAMkF,gBAAiBzD,QAAWoD,SAASM,QAAQ1D,EAAjB,MAAyB;AAC3D,QAAM2D,eAAWtF,qBAA0B;IACzCuF,UAAU;IACVC,gBAAgB;IAChBC,OAAO;IACPC,OAAO,CAAA;IACPhE;IACAD,aAAa;IACb2D;IACAO,UAAUhE,QAAMwD,cAAc1C,IAAId,EAAlB;EARyB,CAApB,EASpBzB;AAEHe,8BAAU,MAAA;AACRqE,aAAS7D,cAAcC,MAAMD;AAC7BO,iBACGe;MADH;IAAA,EAEGX;MAFH;MAEkBwD;IAFlB,EAGGxD;MAHH;MAGmBpF,aAAWkI,aAAahF,WAAW2F,YAAY7I,OAAD;IAHjE,EAIGoF;MAJH;MAI+B0D;IAJ/B,EAKG3C;MALH;MAKwBmC;IALxB;AAOE,WAAO,MAAA;AACLH,oBAAcY,MAAd;AACA/D,mBAAamB;QAAb;QAAqCmC;MAArC;IACD;EACJ,GAAE,CAAA,CAbM;AAeTrE,8BAAU,MAAA;AACRqE,aAAS5D,QAAQA;AACjB4D,aAASF,gBAAgBA;AACzBE,aAASE,iBAAiBT,SAASiB;EACpC,CAJQ;AAMT,WAASF,kBAAT,MAAA;QAA2B;MAAErE;IAAF,IAAA;AACzB,UAAM;MAAEwE;IAAF,IAAYX,SAAS5D;AAC3B,QAAIuE,UAAU,CAACxE,eAAe6D,SAAS7D,gBAAgBA,cAAc;AACnE6D,eAASG,SAASH,SAASI,MAAMM;AACjCV,eAASI,QAAQ,CAAA;IAClB;EACF;AAED,WAASG,YAAY7I,SAArB;AACEgI,gBAAYkB,WACVnJ,eAAeC,OAAD,IAAYkJ,MAAMrD,OAAOlB,QAAMA,OAAO3E,OAA1B,IAAqC,CAAA,CADtD;EAGZ;AAED,WAASmJ,eAAT;AACE,UAAM;MAAEC;MAAcC;MAAYC;IAA5B,IACJhB,SAASI,MAAMa,MAAf;AACFC,gBAAYJ,cAAcC,YAAYC,OAA3B;EACZ;AAOD,WAASG,WAAWC,SAApB;AACE,WACE,CAACxB,aAAahF,WACboF,SAAS5D,MAAMiF,wBACdD,QAAQjF,gBAAgB6D,SAAS5D,MAAMD,eACxC0D,cAAc5C,IAAImE,QAAQ1J,OAA1B,KAAsC0J,QAAQE,YAAY;EAE9D;AAGD,WAAShB,WACPvI,SADF,OAAA;QAEE;MAAEwJ;MAAOP;SAAYI;IAArB,IAAA;AAEA,QAAI,CAACtJ,cAAcC,OAAD,KAAaoJ,WAAWC,OAAD;AAAW;AAEpD,UAAM;MAAE1J;MAAS4J;MAAU/E;IAArB,IAA8B6E;AACpC,UAAM;MAAEhF,OAAAA;IAAF,IAAY4D;AAClB,UAAMwB,aAAa,MAAMjB,YAAY7I,OAAD;AACpC,UAAM+J,gBAAgBH,YAAY;AAElC,QAAIG;AAAezB,eAASG;AAE5B,UAAMY,aAAyB;MAC7BrJ;MACA4J;MACA/E;MACAJ,aAAaiF,QAAQjF;MACrBK,WAAW4E,QAAQ5E;MACnBF,OAAO8E,QAAQ9E,SAASF,OAAME;MAC9BG,MAAM2E,QAAQ3E,QAAQ,OAAO2E,QAAQ3E,OAAOL,OAAMK;MAClDnC,MAAM;MACNoH,KAAKN,QAAQM,OAAO1B,SAASC;MAC7B5E,MAAM+F,QAAQ/F;MACdmG;MACAG,aAAaP,QAAQO;MACrBC,KAAKxF,OAAMwF;MACXzH,UAAUiH,QAAQjH,YAAaiC,OAAMjC;MACrCZ,YAAY6H,QAAQ7H,cAAe6C,OAAM7C;MACzCuC,WAAWtE,eAAe4J,QAAQtF,aAAaM,OAAMyF,cAA5B;MACzBC,eAAetK,eACb4J,QAAQU,iBAAiB1F,OAAM0F,aADJ;MAG7B3I,OAAOiI,QAAQjI,SAASiD,OAAM2F;MAC9BC,WAAWZ,QAAQY,aAAa5F,OAAM4F;MACtCC,SAASb,QAAQa,WAAW7F,OAAM6F;MAClCC,cAAc7K,OAAO+J,QAAQc,YAAT,IAChBd,QAAQc,eACR9F,OAAM8F;MACVC,kBAAkB9K,OAAO+J,QAAQe,gBAAT,IACpBf,QAAQe,mBACR/F,OAAM+F;MACVC,WAAW/K,OAAO+J,QAAQgB,SAAT,IACbhB,QAAQgB,YACRhG,OAAMgG;MACVC,kBACEjB,QAAQiB,oBAAqBjG,OAAMiG;MACrCC,oBACElB,QAAQkB,sBAAsBlG,OAAMkG;MACtCC,cAAclL,OAAO+J,QAAQmB,YAAT,IAChBnB,QAAQmB,eACRnG,OAAMmG;MACVC,mBAAmBhL,eACjB4J,QAAQoB,qBAAqBpG,OAAMoG,iBADJ;MAGjCC,eAAerB,QAAQqB,iBAAiBrG,OAAMqG;MAC9CC,WAAWtB,QAAQ5E,YACf,QACA7E,kBAAkByJ,QAAQsB,WAAWtG,OAAMsG,SAA1B;MACrBC,iBAAiBtL,OAAO+J,QAAQuB,eAAT,IACnBvB,QAAQuB,kBACRvG,OAAMuG;MACVC,UAAUxB,QAAQwB;MAClBC,MAAMzB,QAAQyB,QAAQzG,OAAMyG;MAC5BC,cAAW;AACT,cAAMC,UAAU/G,YAAY6D,cAAc1C,IAAIzF,OAAlB,GAA6B,SAA9B;AAC3BmI,sBAAcrC,OAAO9F,OAArB;AAEAgF,qBAAamB;UAAb;UAAgCkF;QAAhC;AAEA,cAAMC,WAAWhD,SAASI,MAAMM;AAChCV,iBAASG,QAAQ1I,eAAeC,OAAD,IAC3BsI,SAASG,QAAQ,IACjBH,SAASG,QAAQH,SAASE;AAE9B,YAAIF,SAASG,QAAQ;AAAGH,mBAASG,QAAQ;AAEzC,YAAI6C,WAAW,GAAG;AAChB,gBAAMC,WAAWxL,eAAeC,OAAD,IAAY,IAAIsI,SAAS5D,MAAMuE;AAE9D,cAAIqC,aAAa,KAAKC,aAAa,GAAG;AACpCjD,qBAASE;AACTW,yBAAY;UACb,OAAM;AACL,kBAAMqC,YAAYD,WAAWD,WAAWA,WAAWC;AACnDjD,qBAASE,iBAAiBgD;AAE1B,qBAASC,IAAI,GAAGA,IAAID,WAAWC;AAAKtC,2BAAY;UACjD;QACF,OAAM;AACLvB,sBAAW;QACZ;MACF;IA/E4B;AAkF/ByB,eAAWqC,UAAUnE,QAAQ8B,UAAD;AAE5B,QAAIxJ,KAAK6J,QAAQiC,MAAT;AAAkBtC,iBAAWsC,SAASjC,QAAQiC;AACtD,QAAI9L,KAAK6J,QAAQkC,OAAT;AAAmBvC,iBAAWuC,UAAUlC,QAAQkC;AAExDvC,eAAWY,cAAcvF,OAAMuF;AAE/B,QAAIP,QAAQO,gBAAgB,SAAS7J,cAAcsJ,QAAQO,WAAT,GAAuB;AACvEZ,iBAAWY,cAAcP,QAAQO;IAClC,WAAUP,QAAQO,gBAAgB,MAAM;AACvCZ,iBAAWY,cAAc7J,cAAcsE,OAAMuF,WAAP,IAClCvF,OAAMuF,cACN;IACL;AAED,QAAIb,eAAe/I;AAEnB,YAAIC,6BAAeD,OAAD,KAAa,CAACT,MAAMS,QAAQsD,IAAT,GAAgB;AACnDyF,yBAAe1B,2BAAarH,SAAS;QACnCyJ;QACAT;QACAxE;MAHmC,CAAV;IAK5B,WAAUhF,KAAKQ,OAAD,GAAW;AACxB+I,qBAAe/I,QAAQ;QAAEyJ;QAAYT;QAAYxE;MAA1B,CAAD;IACvB;AAGD,QACEH,OAAMuE,SACNvE,OAAMuE,QAAQ,KACdX,SAASG,QAAQ/D,OAAMuE,SACvBc,eACA;AACAzB,eAASI,MAAMhD,KAAK;QAAE0D;QAAcC;QAAYC;MAA5B,CAApB;IACD,WAAU9J,MAAMqK,KAAD,GAAS;AACvB7H,iBAAW,MAAA;AACTwH,oBAAYJ,cAAcC,YAAYC,OAA3B;MACZ,GAAEO,KAFO;IAGX,OAAM;AACLL,kBAAYJ,cAAcC,YAAYC,OAA3B;IACZ;EACF;AAED,WAASE,YACPnJ,SACAgJ,YACAC,SAHF;AAKE,UAAM;MAAEtJ;IAAF,IAAcqJ;AAEpB,QAAIC;AAASnB,oBAAcrC,OAAOwD,OAArB;AAEb,UAAM/E,SAAQ;MACZlE;MACAqE,OAAO2E;IAFK;AAIdlB,kBAAc3C,IAAIxF,SAASuE,MAA3B;AAEAyD,gBAAYkB,WAAS,CAAC,GAAGA,OAAOlJ,OAAX,EAAoB6F,OAAOlB,QAAMA,OAAO2E,OAAxC,CAAV;AACXtE,iBAAamB;MAAb;MAEE7B,YAAYC,QAAOA,OAAMG,MAAMkF,YAAY,OAAO,UAAU,SAAjD;IAFb;EAID;AAED,WAASiC,iBACPjG,IADF;AAGE,UAAMkG,WAAW,oBAAI5G,IAAJ;AACjB,UAAM6G,aAAaC,MAAMC,KAAK9D,cAAc+D,OAAd,CAAX;AAEnB,QAAIxH,MAAMyH;AAAaJ,iBAAWK,QAAX;AAEvBL,eAAW9F,QAAQ1B,CAAAA,WAAK;AACtB,YAAM;QAAE9B;MAAF,IAAe8B,OAAMG;AAC3BoH,eAASvG,IAAI9C,QAAb,KAA0BqJ,SAAStG,IAAI/C,UAAU,CAAA,CAAvB;AAC1BqJ,eAASrG,IAAIhD,QAAb,EAAwBiD,KAAKnB,MAA7B;IACD,CAJD;AAMA,WAAOyH,MAAMC,KAAKH,UAAUO,OAAKzG,GAAGyG,EAAE,IAAIA,EAAE,EAAT,CAA5B;EACR;AAED,SAAO;IACLR;IACA3D;IACAE;EAHK;AAKR;AC3RD,SAASkE,KAAKhJ,GAAd;AACE,SAAOA,EAAEiJ,iBAAiBjJ,EAAEiJ,cAAcvD,UAAU,IAChD1F,EAAEiJ,cAAc,GAAGC,UACnBlJ,EAAEkJ;AACP;AAED,SAASC,KAAKnJ,GAAd;AACE,SAAOA,EAAEiJ,iBAAiBjJ,EAAEiJ,cAAcvD,UAAU,IAChD1F,EAAEiJ,cAAc,GAAGG,UACnBpJ,EAAEoJ;AACP;SAEeC,SAASjI,OAAAA;AACvB,QAAM,CAACkI,WAAWC,YAAZ,QAA4B5E,uBAAS,KAAD;AAC1C,QAAM,CAACvF,uBAAuBoK,wBAAxB,QAAoD7E,uBAAS,KAAD;AAClE,QAAM8E,eAAW/J,qBAAuB,IAAjB;AACvB,QAAMgK,WAAOhK,qBAAkB;IAC7BiK,OAAO;IACPnF,GAAG;IACHoF,GAAG;IACHC,OAAO;IACPC,iBAAiB;IACjBC,iBAAiB;IACjBC,SAAS;IACTC,cAAc;IACdC,SAAS;EAToB,CAAZ,EAUhBtK;AACH,QAAMuK,gBAAYzK,qBAAO0B,KAAD;AACxB,QAAM;IAAEsG;IAAWR;IAAcV;IAAYS;IAASM;EAAhD,IAAiEnG;AAEvET,8BAAU,MAAA;AACRwJ,cAAUvK,UAAUwB;EACrB,CAFQ;AAITT,8BAAU,MAAA;AACR,QAAI8I,SAAS7J;AACX6J,eAAS7J,QAAQc;QAAjB;QAEE0J;QACA;UAAEC,MAAM;QAAR;MAHF;AAMF,QAAI9N,KAAK6E,MAAMiH,MAAP;AACNjH,YAAMiH,WAAOrL,6BAAeoE,MAAMlC,QAAP,KAAoBkC,MAAMlC,SAASkC,KAA9D;AAEF,WAAO,MAAA;AACL,YAAMA,SAAQ+I,UAAUvK;AACxB,UAAIrD,KAAK6E,OAAMkH,OAAP;AACNlH,QAAAA,OAAMkH,YAAQtL,6BAAeoE,OAAMlC,QAAP,KAAoBkC,OAAMlC,SAASkC,KAA/D;IACH;EACF,GAAE,CAAA,CAhBM;AAkBTT,8BAAU,MAAA;AACRS,UAAM+F,oBAAoBmD,gBAAe;AACzC,WAAO,MAAA;AACLlJ,YAAM+F,oBAAoBoD,kBAAiB;IAC5C;EACF,GAAE,CAACnJ,MAAM+F,gBAAP,CALM;AAOT,WAASqD,YACPxK,GADF;AAGE,QAAIoB,MAAMgG,WAAW;AACnBqD,qBAAc;AACd,YAAMxJ,SAAQwI,SAAS7J;AACvB8J,WAAKK,kBAAkB;AACvBL,WAAKM,UAAU;AACfN,WAAKO,eAAehJ,OAAMyJ,sBAAN;AACpBzJ,MAAAA,OAAM9C,MAAMI,aAAa;AACzBmL,WAAKlF,IAAIwE,KAAKhJ,EAAE2K,WAAH;AACbjB,WAAKE,IAAIT,KAAKnJ,EAAE2K,WAAH;AAEb,UAAIvJ,MAAMkG,uBAAN,KAA0C;AAC5CoC,aAAKC,QAAQD,KAAKlF;AAClBkF,aAAKI,kBACH7I,OAAM2J,eAAexJ,MAAMiG,mBAAmB;MACjD,OAAM;AACLqC,aAAKC,QAAQD,KAAKE;AAClBF,aAAKI,kBACH7I,OAAM4J,gBACLzJ,MAAMiG,qBAAN,KACGjG,MAAMiG,mBAAmB,MACzBjG,MAAMiG,mBAAmB;MAChC;IACF;EACF;AAED,WAASyD,sBAAT;AACE,QAAIpB,KAAKO,cAAc;AACrB,YAAM;QAAEc;QAAKC;QAAQC;QAAMC;MAArB,IAA+BxB,KAAKO;AAE1C,UACE7I,MAAM8F,gBACNwC,KAAKlF,KAAKyG,QACVvB,KAAKlF,KAAK0G,SACVxB,KAAKE,KAAKmB,OACVrB,KAAKE,KAAKoB,QACV;AACAG,mBAAU;MACX,OAAM;AACLf,kBAAS;MACV;IACF;EACF;AAED,WAASA,YAAT;AACEb,iBAAa,IAAD;EACb;AAED,WAAS4B,aAAT;AACE5B,iBAAa,KAAD;EACb;AAED,WAASe,kBAAT;AACE,QAAI,CAACc,SAASC,SAAT;AAAqBF,iBAAU;AAEpCG,WAAO5K,iBAAiB,SAAS0J,SAAjC;AACAkB,WAAO5K,iBAAiB,QAAQyK,UAAhC;EACD;AAED,WAASZ,oBAAT;AACEe,WAAOlL,oBAAoB,SAASgK,SAApC;AACAkB,WAAOlL,oBAAoB,QAAQ+K,UAAnC;EACD;AAED,WAASV,iBAAT;AACEf,SAAKQ,UAAU;AACfkB,aAAS1K,iBAAiB,aAAa6K,UAAvC;AACAH,aAAS1K,iBAAiB,WAAW8K,SAArC;AAEAJ,aAAS1K,iBAAiB,aAAa6K,UAAvC;AACAH,aAAS1K,iBAAiB,YAAY8K,SAAtC;EACD;AAED,WAASC,mBAAT;AACEL,aAAShL,oBAAoB,aAAamL,UAA1C;AACAH,aAAShL,oBAAoB,WAAWoL,SAAxC;AAEAJ,aAAShL,oBAAoB,aAAamL,UAA1C;AACAH,aAAShL,oBAAoB,YAAYoL,SAAzC;EACD;AAED,WAASD,WAAWvL,GAApB;AACE,UAAMiB,SAAQwI,SAAS7J;AACvB,QAAI8J,KAAKM,WAAW/I,QAAO;AACzByI,WAAKQ,UAAU;AACf,UAAIZ;AAAW6B,mBAAU;AACzBzB,WAAKlF,IAAIwE,KAAKhJ,CAAD;AACb0J,WAAKE,IAAIT,KAAKnJ,CAAD;AACb,UAAIoB,MAAMkG,uBAAN,KAA0C;AAC5CoC,aAAKG,QAAQH,KAAKlF,IAAIkF,KAAKC;MAC5B,OAAM;AACLD,aAAKG,QAAQH,KAAKE,IAAIF,KAAKC;MAC5B;AAGD,UAAID,KAAKC,UAAUD,KAAKlF;AAAGkF,aAAKK,kBAAkB;AAClD9I,MAAAA,OAAM9C,MAAMuN,YAAZ,cAAoCtK,MAAMkG,qBAA1C,MAAgEoC,KAAKG,QAArE;AACA5I,MAAAA,OAAM9C,MAAMwN,UAAZ,MACE,IAAIC,KAAKC,IAAInC,KAAKG,QAAQH,KAAKI,eAA3B;IAEP;EACF;AAED,WAAS0B,YAAT;AACEC,qBAAgB;AAChB,UAAMxK,SAAQwI,SAAS7J;AACvB,QAAI8J,KAAKM,WAAWN,KAAKQ,WAAWjJ,QAAO;AACzCyI,WAAKM,UAAU;AACf,UAAI4B,KAAKC,IAAInC,KAAKG,KAAd,IAAuBH,KAAKI,iBAAiB;AAC/CN,iCAAyB,IAAD;AACxBpI,cAAMoF,WAAN;AACA;MACD;AACDvF,MAAAA,OAAM9C,MAAMI,aAAa;AACzB0C,MAAAA,OAAM9C,MAAMuN,YAAZ,cAAoCtK,MAAMkG,qBAA1C;AACArG,MAAAA,OAAM9C,MAAMwN,UAAU;IACvB;EACF;AAED,QAAMG,gBAA4C;IAChDC,aAAavB;IACbwB,cAAcxB;IACdyB,WAAWnB;IACXoB,YAAYpB;EAJoC;AAOlD,MAAIpD,aAAaR,cAAc;AAC7B4E,kBAAcK,eAAehB;AAC7BW,kBAAcM,eAAehC;EAC9B;AAGD,MAAI7C,cAAc;AAChBuE,kBAAc7E,UAAWjH,OAAD;AACtBiH,iBAAWA,QAAQjH,CAAD;AAClB0J,WAAKK,mBAAmBvD,WAAU;IACnC;EACF;AAED,SAAO;IACL4D;IACAe;IACA7B;IACAlK;IACAqK;IACAqC;EANK;AAQR;SC9NeO,YAAAA,MAAAA;MAAY;IAC1B7F;IACAlF;IACAgL,YAAY;EAHc,IAAA;AAK1B,SACEvL,aAAAA,QAAAA,cAAA,UAAA;IACED,WAAc,oDAA+EQ;IAC7FjB,MAAK;IACL4G,SAASjH,OAAC;AACRA,QAAEuM,gBAAF;AACA/F,iBAAWxG,CAAD;IACX;kBACWsM;KAEZvL,aAAAA,QAAAA,cAAA,OAAA;mBAAiB;IAAOkC,SAAQ;KAC9BlC,aAAAA,QAAAA,cAAA,QAAA;IACEyL,UAAS;IACTnJ,GAAE;GAFJ,CADF,CATF;AAiBH;SCkCeoJ,YAAAA,MAAAA;MAAY;IAC1BlG;IACA+C;IACA9C;IACAnG;IACAqM;IACA5L;IACA3C,OAAOwO;IACPC;IACAhF;IACAhB;IACAtH;IACAgC;EAZ0B,IAAA;AAc1B,QAAMnD,QAA6B;IACjC,GAAGwO;IACHE,mBAAsBtG,QAAL;IACjBuG,oBAAoBxD,YAAY,YAAY;IAC5CqC,SAASe,OAAO,IAAI;EAJa;AAOnC,MAAIE;AAAoBzO,UAAMuN,YAAN,YAA4B9D,WAA5B;AACxB,QAAMmF,mBAAmBC,eACpB,0BACHJ,qBACO,uCACA,oCACJ,mCAA8CtL,OAC9C,6BAAwCjB,MAC3C;IACE,CAAI,gCAA6CuG;EADnD,CAPyB;AAW3B,QAAMqG,aAAa1Q,KAAKuE,SAAD,IACnBA,UAAU;IACR8F;IACAvG;IACA0M;EAHQ,CAAD,IAKTC,eAAGD,kBAAkBjM,SAAnB;AAKN,QAAMoM,iBAAiB;IACrB,CAACN,sBAAsBhF,YAAa,IAChC,oBACA,mBACFgF,sBAAsBhF,WAAY,IAC9B,OACA,MAAA;AACEtI,cAAQkH,WAAU;IACnB;EARc;AAavB,SACEzF,aAAAA,QAAAA,cAAA,OAAA;IACE8G,MAAK;mBACQ6E,OAAO,SAAS;kBAClB;IACX5L,WAAWmM;IACX9O;OACI+O;GANN;AASH;AAEDT,YAAYU,eAAe;EACzB9M,MAAM7C,KAAKK;EACX6O,MAAM;AAFmB;AChIpB,IAAMU,QAA8BhM,WAAK;AAC9C,QAAM;IAAEkI;IAAWlK;IAAuBqK;IAAUqC;EAA9C,IACJzC,SAASjI,KAAD;AACV,QAAM;IACJuF;IACAzH;IACAwI;IACAT;IACA5G;IACAsH;IACAnB;IACAjI,YAAY8O;IACZlO;IACA2B;IACA3C;IACA2I;IACAE;IACAQ;IACAC;IACAnB;IACAuB;IACAD;IACAhB;IACAlK;IACAoL;IACAxI;IACAkC;IACA4G;IACA9G;EAzBI,IA0BFF;AACJ,QAAM2L,mBAAmBC,eACpB,mBACA,4BAAuC1L,OACvC,sBAAiCjB,MACpC;IACE,CAAI,yBAAsCuG;EAD5C,CAJyB;AAQ3B,QAAM0G,aAAa/Q,KAAKuE,SAAD,IACnBA,UAAU;IACR8F;IACAzH;IACAkB;IACA0M;EAJQ,CAAD,IAMTC,eAAGD,kBAAkBjM,SAAnB;AACN,QAAMyM,uBAAuB,CAAC,CAAC3F;AAE/B,QAAM4F,mBAAmB;IAAEhH;IAAYnG;IAAMiB;EAApB;AACzB,MAAImM,QAAyB;AAE7B,MAAI9G,gBAAgB;AAAO;WAEhBpK,KAAKoK,WAAD,GAAe;AAC5B8G,YAAQ9G,YAAY6G,gBAAD;EACpB,WAAUzM,aAAAA,QAAM/D,eAAe2J,WAArB,GAAmC;AAC5C8G,YAAQ1M,aAAAA,QAAMqD,aAAauC,aAAa6G,gBAAhC;EACT,OAAM;AACLC,YAAQpB,YAAYmB,gBAAD;EACpB;AAED,SACEzM,aAAAA,QAAAA,cAACsM,YAAD;IACE/N;IACAtB,MAAM8J;IACN3I;IACAC;IACAC,SAASoK;KAET1I,aAAAA,QAAAA,cAAA,OAAA;IACEM,IAAI3E;IACJuK;IACAnG,WAAWwM;OACPxB;IACJ3N;IACAuP,KAAKjE;KAEL1I,aAAAA,QAAAA,cAAA,OAAA;IAAA,GACOzB,QAAQ;MAAEuI;IAAF;IACb/G,WACEvE,KAAKuK,aAAD,IACAA,cAAc;MAAEzG;IAAF,CAAD,IACb2M,eAAM,wBAAqClG,aAAzC;IAER3I,OAAO6I;KAENoB,WAAW,QACVrH,aAAAA,QAAAA,cAAA,OAAA;IACED,WAAWkM,eAAM,wBAAqC;MACpD,CAAI,gDACF,CAACxL;IAFiD,CAAzC;KAKZ4G,OANH,GASFrH,aAAAA,QAAAA,cAAA,OAAA,MAAM7B,QAAN,CAnBF,GAqBCuO,QACC/F,aAAa6F,yBACbxM,aAAAA,QAAAA,cAAC0L,aAAD;IAAA,GACOnG,YAAY,CAACiH,uBACd;MAAE7G,KAAG,QAAQJ;IAAb,IACA,CAAA;IACJM;IACAtF;IACAiF,OAAOmB;IACP4B;IACAhK;IACAkH;IACAkG,MAAM/E;IACNtH;IACAlC,OAAOsJ;IACP3G,WAAW0G;IACXoF,oBAAoBW;IACpB3F;GAfF,CA/BJ,CAPF;AA2DH;IChIK+F,SAAShP,cAAc;EAC3BC,OAAU;EACVC,MAAS;EACTC,gBAAgB;AAHW,CAAD;IAMtB8O,QAAQjP,cAAc;EAC1BC,OAAU;EACVC,MAAS;EACTC,gBAAgB;AAHU,CAAD;IAMrB+O,OAAOlP,cAAc;EACzBC,OAAU;EACVC,MAAS;AAFgB,CAAD;IAKpBiP,OAAOnP,cAAc;EACzBC,OAAU;EACVC,MAAS;AAFgB,CAAD;ICPbkP,qBAAiBC,yBAC5B,CAAC5M,OAAOsM,QAAR;AACE,QAAM;IAAEnF;IAAkB3D;IAAcE;EAAlC,IACJT,kBAAkBjD,KAAD;AACnB,QAAM;IAAEN;IAAW3C;IAAOyI;IAAKzF;EAAzB,IAAyCC;AAE/C,WAAS6M,aAAa9O,UAAtB;AACE,UAAM4N,mBAAmBC,eACpB,6BACA,gCAA2C7N,UAC9C;MAAE,CAAI,mCAAgDyH;IAAtD,CAHyB;AAK3B,WAAOrK,KAAKuE,SAAD,IACPA,UAAU;MACR3B;MACAyH;MACAmG;IAHQ,CAAD,IAKTC,eAAGD,kBAAkBvQ,eAAesE,SAAD,CAAjC;EACP;AAEDH,8BAAU,MAAA;AACR,QAAI+M,KAAK;AACNA,UAA+C9N,UAC9CgF,aAAahF;IAChB;EACF,GAAE,CAAA,CALM;AAOT,SACEmB,aAAAA,QAAAA,cAAA,OAAA;IACE2M,KAAK9I;IACL9D,WAAW;IACXO,IAAIF;KAEHoH,iBAAiB,CAACpJ,UAAU+O,cAAX;AAChB,UAAMC,iBAAsC,CAACD,UAAUxI,SACnD;MAAE,GAAGvH;MAAOiQ,eAAe;IAA3B,IACA;MAAE,GAAGjQ;IAAL;AAEJ,WACE4C,aAAAA,QAAAA,cAAA,OAAA;MACED,WAAWmN,aAAa9O,QAAD;MACvBhB,OAAOgQ;MACPzH,KAAG,eAAevH;OAEjB+O,UAAUG,IAAI,CAAA,MAAiClG,MAAjC;UAAC;QAAEpL;QAASqE,OAAO2E;MAAlB,IAAA;AACd,aACEhF,aAAAA,QAAAA,cAACqM,OAAD;QAAA,GACMrH;QACJzG,MAAMwF,cAAciB,WAAWrJ,OAAZ;QACnByB,OACE;UACE,GAAG4H,WAAW5H;UACd,SAASgK,IAAI;UACb,SAAS+F,UAAUxI;QAHrB;QAMFgB,KAAG,WAAWX,WAAWW;SAExB3J,OAZH;IAeH,CAjBA,CALH;EAyBH,CA/BgB,CALnB;AAuCH,CApEqC;AAuExCgR,eAAeO,cAAc;AAE7BP,eAAeZ,eAAe;EAC5BhO,UAAUlC,SAASE;EACnBoB,YAAYoP;EACZ/G,KAAK;EACLc,WAAW;EACXC,iBAAiB;EACjBhB,aAAa0F;EACbnF,cAAc;EACdC,kBAAkB;EAClBI,cAAc;EACdsB,aAAa;EACbzB,WAAW;EACXC,kBAAkB;EAClBC,oBAAkB;EAClBO,MAAM;EACNvG,OAAO;AAfqB;AClE9B,IAAIiN,aAAa,oBAAI3M,IAAJ;AACjB,IAAI4M;AACJ,IAAIpJ,QAAyB,CAAA;AAK7B,SAASC,SAAS3I,SAAlB,MAAA;MAA+B;IAAEyE;EAAF,IAAA;AAC7B,QAAMsN,YAAYF,WAAWpM,IAAIhB,eAAeqN,cAA9B;AAClB,MAAI,CAACC;AAAW,WAAO;AAEvB,SAAOA,UAAUpJ,SAAS3I,OAAnB;AACR;AAKD,SAASgS,kBAAT;AACE,SAAO9C,KAAK+C,OAAL,EAAcC,SAAS,EAAvB,EAA2BC,UAAU,GAAG,CAAxC;AACR;AAKD,SAASC,WAAW1I,SAApB;AACE,MAAIA,YAAY9J,MAAM8J,QAAQ1J,OAAT,KAAqBR,MAAMkK,QAAQ1J,OAAT,IAAoB;AACjE,WAAO0J,QAAQ1J;EAChB;AAED,SAAOgS,gBAAe;AACvB;AAMD,SAASK,cACPhS,SACAqJ,SAFF;AAIE,MAAImI,WAAWS,OAAO,GAAG;AACvBtN,iBAAamB;MAAb;MAA8B9F;MAASqJ;IAAvC;EACD,OAAM;AACLhB,UAAMhD,KAAK;MAAErF;MAASqJ;IAAX,CAAX;EACD;AAED,SAAOA,QAAQ1J;AAChB;AAKD,SAASuS,aAAa5O,MAAc+F,SAApC;AACE,SAAO;IACL,GAAGA;IACH/F,MAAO+F,WAAWA,QAAQ/F,QAASA;IACnC3D,SAASoS,WAAW1I,OAAD;EAHd;AAKR;AAED,SAAS8I,kBAAkB7O,MAA3B;AACE,SAAO,CAACtD,SAAuBqJ,YAC7B2I,cAAchS,SAASkS,aAAa5O,MAAM+F,OAAP,CAAtB;AAChB;AAED,SAASnF,MAAMlE,SAAuBqJ,SAAtC;AACE,SAAO2I,cAAchS,SAASkS,aAAazR,KAAKK,SAASuI,OAAf,CAAtB;AACrB;AAEDnF,MAAMkO,UAAU,CAACpS,SAAuBqJ,YACtC2I,cACEhS,SACAkS,aAAazR,KAAKK,SAAS;EACzB2D,WAAW;EACXkG,WAAW;EACXH,cAAc;EACdZ,aAAa;EACbS,WAAW;EACX,GAAGhB;AANsB,CAAf,CAFD;AAkBf,SAASgJ,cACPC,SADF,OAGEjJ,SAHF;MAEE;IAAEkJ;IAASxL;IAAOD;EAAlB,IAAA;AAGA,MAAIxC;AAEJ,MAAIiO,SAAS;AACXjO,SAAK/E,MAAMgT,OAAD,IACNrO,MAAMkO,QAAQG,SAASlJ,OAAvB,IACAnF,MAAMkO,QAAQG,QAAQC,QAAQ;MAC5B,GAAGnJ;MACH,GAAIkJ;IAFwB,CAA9B;EAIL;AAED,QAAME,cAAc;IAClBhO,WAAW;IACXkG,WAAW;IACXH,cAAc;IACdZ,aAAa;IACbS,WAAW;IACXb,OAAO;EANW;AASpB,QAAMkJ,WAAW,CACfpP,MACAqP,OACAC,WAHe;AAOf,QAAID,SAAS,MAAM;AACjBzO,YAAM2O,QAAQvO,EAAd;AACA;IACD;AAED,UAAMwO,aAAa;MACjBxP;MACA,GAAGmP;MACH,GAAGpJ;MACH7E,MAAMoO;IAJW;AAMnB,UAAMG,SAASxT,MAAMoT,KAAD,IAAU;MAAEH,QAAQG;IAAV,IAAoBA;AAGlD,QAAIrO,IAAI;AACNJ,YAAM8O,OAAO1O,IAAI;QACf,GAAGwO;QACH,GAAGC;MAFY,CAAjB;IAID,OAAM;AAEL7O,YAAM6O,OAAOP,QAAQ;QACnB,GAAGM;QACH,GAAGC;MAFgB,CAAhB;IAIN;AAED,WAAOH;EACR;AAED,QAAM5G,IAAIxM,KAAK8S,OAAD,IAAYA,QAAO,IAAKA;AAGtCtG,IAAEiH,KAAKL,YAAUF,SAAS,WAAW5L,SAAS8L,MAArB,CAAzB,EAAuDM,MAAMC,SAC3DT,SAAS,SAAS3L,OAAOoM,GAAjB,CADV;AAIA,SAAOnH;AACR;AAED9H,MAAMoO,UAAUD;AAChBnO,MAAM4C,UAAUqL,kBAAkB1R,KAAKE,OAAN;AACjCuD,MAAM0C,OAAOuL,kBAAkB1R,KAAKC,IAAN;AAC9BwD,MAAM6C,QAAQoL,kBAAkB1R,KAAKI,KAAN;AAC/BqD,MAAM2C,UAAUsL,kBAAkB1R,KAAKG,OAAN;AACjCsD,MAAMkP,OAAOlP,MAAM2C;AACnB3C,MAAMmP,OAAO,CAACrT,SAAuBqJ,YACnC2I,cACEhS,SACAkS,aAAazR,KAAKK,SAAS;EACzByD,OAAO;EACP,GAAG8E;AAFsB,CAAf,CAFD;AAWfnF,MAAM2O,UAAWvO,QAAD;AACd,MAAIkN,WAAWS,OAAO,GAAG;AACvBtN,iBAAamB;MAAb;MAA+BxB;IAA/B;EACD,OAAM;AACL+D,YAAQA,MAAM7C,OAAO8N,OAAK5T,eAAe4E,EAAD,KAAQgP,EAAEjK,QAAQ1J,YAAY2E,EAA9D;EACT;AACF;AAKDJ,MAAMuE,oBAAoB,SAACsK,QAAD;AAAA,MAACA,WAAD,QAAA;AAACA,aAAkC,CAAA;EAAnC;AAAA,SACxBpO,aAAamB;IAAb;IAA2CiN;EAA3C;AADwB;AAM1B7O,MAAMqP,WAAYjP,QAAD;AACf,MAAIyD,gBAAgB;AAEpByJ,aAAW5L,QAAQ8L,eAAS;AAC1B,QAAIA,UAAU3J,iBAAiB2J,UAAU3J,cAAczD,EAAxB,GAA6B;AAC1DyD,sBAAgB;IACjB;EACF,CAJD;AAMA,SAAOA;AACR;AAED7D,MAAM8O,SAAS,SAACrT,SAAa0J,SAAd;MAAcA,YAAAA,QAAAA;AAAAA,cAAyB,CAAA;;AAGpD1H,aAAW,MAAA;AACT,UAAMuC,SAAQoE,SAAS3I,SAAS0J,OAAV;AACtB,QAAInF,QAAO;AACT,YAAM;QAAEG,OAAOmP;QAAYxT,SAASyT;MAA9B,IAA6CvP;AAEnD,YAAMwP,cAAc;QAClB,GAAGF;QACH,GAAGnK;QACH1J,SAAS0J,QAAQ1J,WAAWA;QAC5B4J,UAAUoI,gBAAe;MAJP;AAOpB,UAAI+B,YAAY/T,YAAYA;AAAS+T,oBAAYzK,UAAUtJ;AAE3D,YAAMK,UAAU0T,YAAYlB,UAAUiB;AACtC,aAAOC,YAAYlB;AAEnBR,oBAAchS,SAAS0T,WAAV;IACd;EACF,GAAE,CAnBO;AAoBX;AAKDxP,MAAMjD,OAAQqD,QAAD;AACXJ,QAAM8O,OAAO1O,IAAI;IACfuG,UAAU;EADK,CAAjB;AAGD;AAsBD3G,MAAMyP,WAAY1O,cAAD;AACfN,eAAaI;IAAb;IAA8BE;EAA9B;AACA,SAAO,MAAA;AACLN,iBAAaW;MAAb;MAA+BL;IAA/B;EACD;AACF;AAEDf,MAAMhE,WAAWA;AACjBgE,MAAMzD,OAAOA;AAMbkE,aACGI;EADH;EACuB6O,uBAAD;AAClBnC,qBAAiBmC,kBAAkBxP,eAAewP;AAClDpC,eAAWrM,IAAIsM,gBAAgBmC,iBAA/B;AAEAvL,UAAMzC,QAAQiO,UAAI;AAChBlP,mBAAamB;QAAb;QAA8B+N,KAAK7T;QAAS6T,KAAKxK;MAAjD;IACD,CAFD;AAIAhB,YAAQ,CAAA;EACT;AAVH,EAWGtD;EAXH;EAW0B6O,uBAAD;AACrBpC,eAAW/L,OAAOmO,kBAAkBxP,eAAewP,iBAAnD;AAEA,QAAIpC,WAAWS,SAAS,GAAG;AACzBtN,mBACGW;QADH;MAAA,EAEGA;QAFH;MAAA,EAGGA;QAHH;MAAA;IAID;EACF;AApBH;",
  "names": ["isNum", "v", "isNaN", "isBool", "isStr", "isFn", "parseClassName", "isToastIdValid", "toastId", "getAutoCloseDelay", "toastAutoClose", "containerAutoClose", "canBeRendered", "content", "isValidElement", "POSITION", "TOP_LEFT", "TOP_RIGHT", "TOP_CENTER", "BOTTOM_LEFT", "BOTTOM_RIGHT", "BOTTOM_CENTER", "TYPE", "INFO", "SUCCESS", "WARNING", "ERROR", "DEFAULT", "collapseToast", "node", "done", "duration", "scrollHeight", "style", "requestAnimationFrame", "minHeight", "height", "transition", "padding", "margin", "setTimeout", "cssTransition", "enter", "exit", "appendPosition", "collapse", "collapseDuration", "ToastTransition", "children", "position", "preventExitTransition", "nodeRef", "isIn", "enterClassName", "exitClassName", "animationStep", "useRef", "useLayoutEffect", "current", "classToToken", "split", "onEntered", "e", "target", "dispatchEvent", "Event", "removeEventListener", "type", "classList", "remove", "onEnter", "add", "addEventListener", "useEffect", "onExited", "onExit", "className", "React", "toToastItem", "toast", "status", "containerId", "props", "id", "theme", "data", "isLoading", "icon", "eventManager", "list", "Map", "emitQueue", "on", "event", "callback", "has", "set", "get", "push", "off", "cb", "filter", "delete", "cancelEmit", "timers", "forEach", "clearTimeout", "emit", "timer", "Svg", "rest", "viewBox", "width", "fill", "Warning", "d", "Info", "Success", "Error", "Spinner", "Icons", "info", "warning", "success", "error", "spinner", "maybeIcon", "getIcon", "Icon", "iconProps", "cloneElement", "useToastContainer", "forceUpdate", "useReducer", "x", "toastIds", "setToastIds", "useState", "containerRef", "toastToRender", "isToastActive", "indexOf", "instance", "toastKey", "displayedToast", "count", "queue", "getToast", "buildToast", "removeToast", "clearWaitingQueue", "clear", "length", "limit", "state", "dequeueToast", "toastContent", "toastProps", "staleId", "shift", "appendToast", "isNotValid", "options", "enableMultiContainer", "updateId", "delay", "closeToast", "isNotAnUpdate", "key", "closeButton", "rtl", "toastClassName", "bodyClassName", "toastStyle", "bodyStyle", "onClick", "pauseOnHover", "pauseOnFocusLoss", "draggable", "draggablePercent", "draggableDirection", "closeOnClick", "progressClassName", "progressStyle", "autoClose", "hideProgressBar", "progress", "role", "deleteToast", "removed", "queueLen", "freeSlot", "toDequeue", "i", "iconOut", "onOpen", "onClose", "getToastToRender", "toRender", "collection", "Array", "from", "values", "newestOnTop", "reverse", "p", "getX", "targetTouches", "clientX", "getY", "clientY", "useToast", "isRunning", "setIsRunning", "setPreventExitTransition", "toastRef", "drag", "start", "y", "delta", "removalDistance", "canCloseOnClick", "canDrag", "boundingRect", "didMove", "syncProps", "playToast", "once", "bindFocusEvents", "unbindFocusEvents", "onDragStart", "bindDragEvents", "getBoundingClientRect", "nativeEvent", "offsetWidth", "offsetHeight", "onDragTransitionEnd", "top", "bottom", "left", "right", "pauseToast", "document", "hasFocus", "window", "onDragMove", "onDragEnd", "unbindDragEvents", "transform", "opacity", "Math", "abs", "eventHandlers", "onMouseDown", "onTouchStart", "onMouseUp", "onTouchEnd", "onMouseEnter", "onMouseLeave", "CloseButton", "ariaLabel", "stopPropagation", "fillRule", "ProgressBar", "hide", "userStyle", "controlledProgress", "animationDuration", "animationPlayState", "defaultClassName", "cx", "classNames", "animationEvent", "defaultProps", "Toast", "Transition", "cssClasses", "isProgressControlled", "closeButtonProps", "Close", "ref", "Bounce", "Slide", "Zoom", "Flip", "ToastContainer", "forwardRef", "getClassName", "toastList", "containerStyle", "pointerEvents", "map", "displayName", "containers", "latestInstance", "container", "generateToastId", "random", "toString", "substring", "getToastId", "dispatchToast", "size", "mergeOptions", "createToastByType", "loading", "handlePromise", "promise", "pending", "render", "resetParams", "resolver", "input", "result", "dismiss", "baseParams", "params", "update", "then", "catch", "err", "warn", "dark", "t", "isActive", "oldOptions", "oldContent", "nextOptions", "onChange", "containerInstance", "item"]
}
